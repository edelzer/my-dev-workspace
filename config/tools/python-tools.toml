# Python Development Tools Configuration
# Unified configuration for Python projects using pyproject.toml format

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app", "tests"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 100
max-complexity = 15
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
    ".venv",
    ".env",
    "migrations",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "test_*.py:S101",    # use of assert
    "**/tests/**:S101",  # use of assert in tests
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Module-specific configurations
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "migrations.*"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "celery.*",
    "uvicorn.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--no-cov-on-fail",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/config/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls
]

[tool.bandit.assert_used]
skips = ["*/tests/*", "*test_*.py"]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-parents = 7
max-attributes = 10
min-public-methods = 1
max-public-methods = 25

[tool.pylint.similarities]
min-similarity-lines = 8
ignore-comments = true
ignore-docstrings = true

[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true
remove-duplicate-keys = true
expand-star-imports = true
ignore-init-module-imports = true

[tool.pydocstyle]
convention = "google"
match-dir = "(?!tests)(?!migrations).*"
match = "(?!test_).*\\.py"
add-ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 80
exclude = ["tests", "migrations", "venv", ".venv"]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.setuptools-scm]
write_to = "app/_version.py"

# Security-focused configurations
[tool.safety]
# Ignore specific vulnerabilities (update as needed)
ignore = []
full_report = true
output = "json"

[tool.pip-audit]
# Configuration for pip-audit security scanning
desc = true
format = "json"
output = "security-report.json"

# Development environment configurations
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "app/__init__.py",
    "pyproject.toml:version"
]

[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            { id = "trailing-whitespace" },
            { id = "end-of-file-fixer" },
            { id = "check-yaml" },
            { id = "check-added-large-files" },
            { id = "check-merge-conflict" },
            { id = "debug-statements" },
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.3.0",
        hooks = [
            { id = "black" }
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            { id = "isort" }
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [
            { id = "flake8" }
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.3.0",
        hooks = [
            { id = "mypy", additional_dependencies = ["types-all"] }
        ]
    },
    {
        repo = "https://github.com/PyCQA/bandit",
        rev = "1.7.5",
        hooks = [
            { id = "bandit", args = ["-r", "app", "-f", "json", "-o", "bandit-report.json"] }
        ]
    }
]