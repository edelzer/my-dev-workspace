name: Issue to PR Automation
run-name: Issue to PR - Issue #${{ github.event.issue.number }}

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

jobs:
  analyze-issue:
    name: Analyze Issue for Implementation
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'auto-implement')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/implement') && github.event.issue.state == 'open')
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write

    outputs:
      should_implement: ${{ steps.analysis.outputs.should_implement }}
      implementation_plan: ${{ steps.analysis.outputs.implementation_plan }}
      branch_name: ${{ steps.analysis.outputs.branch_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze issue complexity
        id: analysis
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';
            
            // Define keywords that indicate different complexity levels
            const simpleKeywords = ['typo', 'docs', 'documentation', 'readme', 'comment', 'text', 'link'];
            const complexKeywords = ['refactor', 'architecture', 'database', 'api', 'security', 'performance', 'algorithm'];
            
            const content = (issueTitle + ' ' + issueBody).toLowerCase();
            
            const isSimple = simpleKeywords.some(keyword => content.includes(keyword));
            const isComplex = complexKeywords.some(keyword => content.includes(keyword));
            
            // Determine if we should auto-implement
            const shouldImplement = isSimple || (!isComplex && content.length < 1000);
            
            // Generate branch name
            const branchName = `issue-${issue.number}-${issueTitle.toLowerCase().replace(/[^a-z0-9]/g, '-').substring(0, 50)}`;
            
            // Create implementation plan
            const implementationPlan = {
              complexity: isComplex ? 'high' : (isSimple ? 'low' : 'medium'),
              estimatedTime: isSimple ? '15min' : (isComplex ? '2h+' : '45min'),
              requiresHumanReview: isComplex,
              suggestedApproach: isSimple ? 'direct-implementation' : (isComplex ? 'design-first' : 'tdd-approach'),
              securityConsiderations: content.includes('auth') || content.includes('security') || content.includes('password'),
              testingRequired: !isSimple
            };
            
            core.setOutput('should_implement', shouldImplement);
            core.setOutput('implementation_plan', JSON.stringify(implementationPlan));
            core.setOutput('branch_name', branchName);
            
            // Comment analysis results
            const analysisComment = `## üîç Issue Analysis Results
            
            **Complexity Level:** ${implementationPlan.complexity.toUpperCase()}
            **Estimated Time:** ${implementationPlan.estimatedTime}
            **Auto-Implementation:** ${shouldImplement ? '‚úÖ Approved' : '‚ùå Requires Manual Review'}
            
            **Implementation Plan:**
            - Approach: ${implementationPlan.suggestedApproach}
            - Security Review: ${implementationPlan.securityConsiderations ? 'Required' : 'Not Required'}
            - Testing Required: ${implementationPlan.testingRequired ? 'Yes' : 'No'}
            - Human Review: ${implementationPlan.requiresHumanReview ? 'Required' : 'Optional'}
            
            ${shouldImplement ? 
              `**Next Steps:** Creating branch \`${branchName}\` and implementing solution...` :
              '**Next Steps:** This issue requires manual planning and implementation due to its complexity.'
            }`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: analysisComment
            });

      - name: Create implementation branch
        if: steps.analysis.outputs.should_implement == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "${{ steps.analysis.outputs.branch_name }}"
          git push origin "${{ steps.analysis.outputs.branch_name }}"

  bmad-analysis:
    name: BMAD Multi-Agent Analysis
    runs-on: ubuntu-latest
    needs: analyze-issue
    if: needs.analyze-issue.outputs.should_implement == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      bmad_recommendation: ${{ steps.bmad-analysis.outputs.bmad_recommendation }}
      agent_assignment: ${{ steps.bmad-analysis.outputs.agent_assignment }}
      coordination_plan: ${{ steps.bmad-analysis.outputs.coordination_plan }}

    steps:
      - name: Checkout implementation branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.analyze-issue.outputs.branch_name }}

      - name: BMAD Multi-Agent Coordination Analysis
        id: bmad-analysis
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const implementationPlan = JSON.parse('${{ needs.analyze-issue.outputs.implementation_plan }}');
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';
            
            // Analyze issue content for BMAD agent assignment
            const content = (issueTitle + ' ' + issueBody).toLowerCase();
            
            // Define agent assignment patterns
            const agentPatterns = {
              frontend: ['ui', 'component', 'react', 'vue', 'frontend', 'interface', 'styling', 'css', 'design'],
              backend: ['api', 'server', 'database', 'endpoint', 'service', 'backend', 'auth', 'middleware'],
              security: ['security', 'auth', 'permission', 'vulnerability', 'encryption', 'token', 'oauth'],
              testing: ['test', 'testing', 'spec', 'coverage', 'validation', 'e2e', 'integration'],
              architecture: ['architecture', 'design', 'structure', 'refactor', 'system', 'framework'],
              devops: ['deploy', 'ci', 'cd', 'pipeline', 'docker', 'build', 'release']
            };
            
            // Determine primary agent assignment
            let primaryAgent = 'spec-developer'; // Default full-stack agent
            let secondaryAgents = [];
            
            Object.entries(agentPatterns).forEach(([agent, keywords]) => {
              const matches = keywords.filter(keyword => content.includes(keyword)).length;
              if (matches > 0) {
                if (agent === 'frontend' || agent === 'backend') {
                  primaryAgent = `${agent}-developer`;
                } else if (agent === 'security') {
                  primaryAgent = 'security-specialist';
                  secondaryAgents.push('spec-reviewer');
                } else if (agent === 'testing') {
                  primaryAgent = 'spec-tester';
                  secondaryAgents.push('spec-reviewer');
                } else if (agent === 'architecture') {
                  primaryAgent = 'spec-architect';
                  secondaryAgents.push('spec-planner');
                }
              }
            });
            
            // Create BMAD coordination plan
            const coordinationPlan = {
              primaryAgent: primaryAgent,
              secondaryAgents: secondaryAgents,
              requiresBMAD: implementationPlan.complexity === 'high' || secondaryAgents.length > 0,
              planningPhase: implementationPlan.complexity === 'high',
              securityReview: implementationPlan.securityConsiderations,
              testingRequired: implementationPlan.testingRequired,
              estimatedAgents: 1 + secondaryAgents.length + (implementationPlan.complexity === 'high' ? 2 : 0)
            };
            
            // Generate BMAD recommendation
            const bmadRecommendation = {
              useMultiAgent: coordinationPlan.requiresBMAD,
              workflow: coordinationPlan.planningPhase ? 'full-bmad' : 'targeted-implementation',
              phases: [
                ...(coordinationPlan.planningPhase ? ['spec-analyst', 'spec-architect', 'spec-planner'] : []),
                coordinationPlan.primaryAgent,
                ...coordinationPlan.secondaryAgents,
                ...(coordinationPlan.testingRequired ? ['spec-tester'] : []),
                ...(coordinationPlan.securityReview ? ['security-specialist'] : []),
                'spec-validator'
              ]
            };
            
            core.setOutput('bmad_recommendation', JSON.stringify(bmadRecommendation));
            core.setOutput('agent_assignment', JSON.stringify(coordinationPlan));
            core.setOutput('coordination_plan', JSON.stringify(coordinationPlan));
            
            // Comment with BMAD analysis
            const bmadComment = `## ü§ñ BMAD Multi-Agent Coordination Analysis
            
            **Primary Agent Assignment:** \`${coordinationPlan.primaryAgent}\`
            **Secondary Agents:** ${coordinationPlan.secondaryAgents.length > 0 ? coordinationPlan.secondaryAgents.map(a => `\`${a}\``).join(', ') : 'None'}
            **Multi-Agent Workflow:** ${bmadRecommendation.useMultiAgent ? '‚úÖ Recommended' : '‚ùå Single agent sufficient'}
            
            **Coordination Plan:**
            - **Workflow Type:** ${bmadRecommendation.workflow}
            - **Estimated Agents:** ${coordinationPlan.estimatedAgents}
            - **Planning Phase Required:** ${coordinationPlan.planningPhase ? 'Yes' : 'No'}
            - **Security Review:** ${coordinationPlan.securityReview ? 'Required' : 'Standard'}
            - **Testing Coordination:** ${coordinationPlan.testingRequired ? 'Comprehensive' : 'Basic'}
            
            **Implementation Phases:**
            ${bmadRecommendation.phases.map((phase, index) => `${index + 1}. \`${phase}\``).join('\n')}
            
            **Next Steps:** ${bmadRecommendation.useMultiAgent ? 'Initiating multi-agent coordination workflow' : 'Proceeding with single-agent implementation'}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: bmadComment
            });

  implement-solution:
    name: Enterprise AI Implementation
    runs-on: ubuntu-latest
    needs: [analyze-issue, bmad-analysis]
    if: needs.analyze-issue.outputs.should_implement == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout implementation branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.analyze-issue.outputs.branch_name }}

      - name: Enterprise-Grade Implementation Request
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const implementationPlan = JSON.parse('${{ needs.analyze-issue.outputs.implementation_plan }}');
            const bmadRecommendation = JSON.parse('${{ needs.bmad-analysis.outputs.bmad_recommendation }}');
            const coordinationPlan = JSON.parse('${{ needs.bmad-analysis.outputs.coordination_plan }}');
            
            const claudeRequest = `@claude **ENTERPRISE IMPLEMENTATION REQUEST**
            
            ## üìã Issue Implementation Brief
            **Issue #${issue.number}:** ${issue.title}
            **Branch:** \`${{ needs.analyze-issue.outputs.branch_name }}\`
            **Priority Level:** ${implementationPlan.complexity.toUpperCase()}
            
            **Description:**
            ${issue.body}
            
            ## üèóÔ∏è BMAD Multi-Agent Coordination Plan
            **Workflow Type:** ${bmadRecommendation.workflow}
            **Primary Agent:** \`${coordinationPlan.primaryAgent}\`
            **Secondary Agents:** ${coordinationPlan.secondaryAgents.length > 0 ? coordinationPlan.secondaryAgents.map(a => \`\${a}\`).join(', ') : 'None'}
            **Total Phases:** ${bmadRecommendation.phases.length}
            
            **Implementation Sequence:**
            ${bmadRecommendation.phases.map((phase, index) => `${index + 1}. **${phase}** - ${getAgentDescription(phase)}`).join('\n')}
            
            ## üîí Security-First Protocol Compliance
            **Security Level:** ${implementationPlan.securityConsiderations ? 'HIGH - Enhanced Security Required' : 'STANDARD - Normal Security Practices'}
            **Authorization Required:** ${implementationPlan.requiresHumanReview ? 'YES - Human approval needed before merge' : 'NO - Automated approval sufficient'}
            
            ## üìã Development Protocol Requirements
            
            ### MANDATORY Phase Sequence:
            1. **ANALYZE** ‚Üí Complete security analysis before implementation
            2. **IMPLEMENT** ‚Üí Apply security controls during development  
            3. **TEST** ‚Üí Comprehensive testing following TDD methodology
            4. **MONITOR** ‚Üí Implement monitoring and validation
            
            ### Quality Gates:
            - [x] Security-First Protocol (ANALYZE ‚Üí IMPLEMENT ‚Üí TEST ‚Üí MONITOR)
            - [x] ${implementationPlan.testingRequired ? 'TDD Integration (SPECIFY ‚Üí TEST ‚Üí IMPLEMENT ‚Üí REFACTOR)' : 'Basic Testing Integration'}
            - [x] Surgical Debugging (Level 1-7 systematic escalation)
            - [x] Task Decomposition (15-30 minute micro-tasks)
            - [x] TodoWrite Progress Tracking
            
            ### Agent Coordination Protocol:
            ${bmadRecommendation.useMultiAgent ? `
            **Multi-Agent Workflow Required:**
            - Use TodoWrite for cross-agent task coordination
            - Maintain shared context in .bmad-workspace/
            - Follow quality gates at each agent handoff
            - Document all agent communications and decisions
            ` : `
            **Single-Agent Implementation:**
            - Use ${coordinationPlan.primaryAgent} for primary implementation
            - Follow standard development protocols
            - Coordinate with secondary review agents as needed
            `}
            
            ## üìä Implementation Specifications
            
            **Complexity Assessment:** ${implementationPlan.complexity}
            **Estimated Time:** ${implementationPlan.estimatedTime}
            **Testing Strategy:** ${implementationPlan.testingRequired ? 'Comprehensive (Unit + Integration + E2E)' : 'Basic Validation'}
            **Documentation Level:** ${implementationPlan.complexity === 'high' ? 'Comprehensive documentation required' : 'Standard documentation'}
            
            **Success Criteria:**
            1. Functional requirements met with zero regressions
            2. Security validation passes all checks
            3. Test coverage meets project standards
            4. Code quality standards maintained
            5. Documentation updated appropriately
            6. Performance impact assessed and documented
            
            ## üöÄ Implementation Instructions
            
            **Start Implementation Now:**
            1. Begin with security analysis phase
            2. Create TodoWrite tracking for all phases
            3. Follow BMAD agent coordination if multi-agent workflow
            4. Implement comprehensive testing
            5. Document all decisions and trade-offs
            6. Create pull request with full compliance documentation
            
            **Enterprise Requirements:**
            - Full audit trail of all changes
            - Comprehensive security documentation
            - Performance impact assessment
            - Rollback plan documentation
            - Compliance verification checklist
            
            When implementation is complete, create a pull request that includes:
            - **Links:** Issue #${issue.number} resolution
            - **Security:** Full security compliance documentation
            - **Testing:** Comprehensive test suite with coverage reports
            - **Documentation:** Updated technical documentation
            - **Compliance:** Enterprise-grade compliance checklist
            - **Review:** ${implementationPlan.requiresHumanReview ? 'Human review required before merge' : 'Automated review and merge approved'}
            
            **CRITICAL:** This is an enterprise-grade implementation. Follow all protocols exactly as specified. No shortcuts or compromises on security, testing, or documentation.`;
            
            // Helper function for agent descriptions
            function getAgentDescription(agent) {
              const descriptions = {
                'spec-analyst': 'Requirements analysis and user story creation',
                'spec-architect': 'Technical architecture and system design',
                'spec-planner': 'Task decomposition and effort estimation',
                'frontend-developer': 'UI/UX implementation and React development',
                'backend-developer': 'Server-side logic and API development',
                'spec-developer': 'Full-stack implementation and integration',
                'spec-tester': 'Comprehensive testing and quality validation',
                'spec-reviewer': 'Code quality review and standards enforcement',
                'security-specialist': 'Security analysis and threat modeling',
                'spec-validator': 'Final quality gates and deployment readiness'
              };
              return descriptions[agent] || 'Specialized development task';
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: claudeRequest
            });

  create-pr-on-completion:
    name: Create PR When Implementation Complete  
    runs-on: ubuntu-latest
    needs: [analyze-issue, bmad-analysis, implement-solution]
    if: always() && needs.analyze-issue.outputs.should_implement == 'true'
    
    steps:
      - name: Check for implementation completion
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ needs.analyze-issue.outputs.branch_name }}';
            const issue = context.payload.issue;
            
            // Check if branch has commits beyond the initial branch creation
            try {
              const { data: commits } = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: branchName,
                per_page: 5
              });
              
              // If there are commits on this branch (implementation happened)
              if (commits.length > 0) {
                // Check if PR already exists
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branchName}`,
                  state: 'open'
                });
                
                if (prs.length === 0) {
                  // Create PR
                  const implementationPlan = JSON.parse('${{ needs.analyze-issue.outputs.implementation_plan }}');
                  
                  const prBody = `## ü§ñ Automated Implementation
                  
                  **Resolves:** #${issue.number}
                  **Branch:** \`${branchName}\`
                  **Implementation Approach:** ${implementationPlan.suggestedApproach}
                  
                  ### Implementation Details
                  - **Complexity Level:** ${implementationPlan.complexity}
                  - **Estimated Time:** ${implementationPlan.estimatedTime}
                  - **Security Review:** ${implementationPlan.securityConsiderations ? 'Required ‚ö†Ô∏è' : 'Standard'}
                  - **Testing:** ${implementationPlan.testingRequired ? 'Comprehensive tests included ‚úÖ' : 'Basic validation'}
                  
                  ### Development Protocol Compliance
                  - [x] Security-First Protocol followed
                  - [x] ${implementationPlan.testingRequired ? 'TDD methodology applied' : 'Testing as appropriate'}
                  - [x] Code quality standards maintained
                  - [x] Documentation updated as needed
                  
                  ### Review Checklist
                  - [ ] Code functionality verified
                  - [ ] Security review ${implementationPlan.securityConsiderations ? '(REQUIRED)' : '(optional)'}
                  - [ ] Performance impact assessed
                  - [ ] Test coverage adequate
                  - [ ] Documentation complete
                  
                  **Note:** This PR was automatically created from issue analysis and Claude Code implementation.
                  ${implementationPlan.requiresHumanReview ? '‚ö†Ô∏è **Human review required before merging due to complexity.**' : ''}`;
                  
                  const { data: pr } = await github.rest.pulls.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `Implement: ${issue.title}`,
                    head: branchName,
                    base: 'main',
                    body: prBody,
                    draft: implementationPlan.requiresHumanReview
                  });
                  
                  // Add labels to PR
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: ['auto-generated', implementationPlan.complexity + '-complexity']
                  });
                  
                  // Comment on original issue
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `## ‚úÖ Implementation Complete
                    
                    A pull request has been created: #${pr.number}
                    
                    The implementation is ready for review and testing.
                    ${implementationPlan.requiresHumanReview ? '‚ö†Ô∏è **Human review required before merging.**' : '‚úÖ **Ready for automated testing and merge.**'}`
                  });
                }
              } else {
                // No implementation yet, wait for Claude to complete
                console.log('Waiting for implementation to be completed...');
              }
            } catch (error) {
              console.log('Branch may not exist yet or implementation not started:', error.message);
            }