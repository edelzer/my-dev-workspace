{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Code Quality Suite executing...' && { black . --quiet 2>/dev/null || true; } && { prettier --write **/*.{js,ts,jsx,tsx} --ignore-unknown 2>/dev/null || true; } && { if [ -f package.json ]; then npm run lint:fix 2>/dev/null || eslint --fix . 2>/dev/null; else echo 'Linting skipped - no configuration found'; fi; } && { grep -r 'console\\.log\\|debugger\\|alert(' . --include='*.js' --include='*.ts' --include='*.jsx' --include='*.tsx' --exclude-dir=node_modules 2>/dev/null | wc -l | awk '{if($1>0) print \"Warning: \" $1 \" debug statement(s) found\"}'; } && echo '[Hook] Code Quality Suite completed'",
            "description": "Integrated code quality suite: formatting, linting, debug detection"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Security Validation executing...' && { if [ -f .gitignore ]; then grep -E '(API_KEY|SECRET|PASSWORD|TOKEN)' \"$CLAUDE_TARGET_FILE\" 2>/dev/null && echo 'Warning: Potential secrets detected' || true; fi; } && { find . -name 'package*.json' -exec npm audit --audit-level=high --quiet {} \\; 2>/dev/null | head -3 || true; } && echo '[Hook] Security Validation completed'",
            "description": "Integrated security validation: secret scanning, dependency audit"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Git Status Manager executing...' && git add -A && { git status --porcelain | wc -l | awk '{if($1>0) print \"\" $1 \" file(s) staged for commit\"; else print \"No changes to stage\"}'; } && { git log --oneline -1 | awk '{print \"Last commit: \" substr($0,1,50) \"...\"}'; } && echo '[Hook] Git Status Manager completed'",
            "description": "Integrated git operations: staging, status, commit context"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write", 
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Test & Build Validation executing...' && { if [ -d tests/ ] || [ -d test/ ] || [ -d __tests__/ ]; then npm test --silent 2>/dev/null || python -m pytest --quiet 2>/dev/null || echo 'Tests need attention'; fi; } && { if [ -f 'CLAUDE.md' ]; then echo 'Remember to update CLAUDE.md if project structure changed'; fi; } && echo '[Hook] Test & Build Validation completed'",
            "description": "Integrated testing and build validation with project documentation reminder"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] File Creation Notification: '$CLAUDE_TARGET_FILE' - Consider adding to git if needed'",
            "description": "New file creation notification with git guidance"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "git diff --stat \"$CLAUDE_TARGET_FILE\" 2>/dev/null | tail -1 || echo '[Hook] File modified: '$CLAUDE_TARGET_FILE",
            "description": "File modification summary with change statistics"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Command Log: '$CLAUDE_COMMAND' executed at '$(date '+%H:%M:%S')",
            "description": "Streamlined command execution logging"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Git Safety Checks executing...' && { if echo \"$CLAUDE_COMMAND\" | grep -E '(git commit|git push)'; then echo 'Running pre-commit validation...' && git diff --cached --name-only | xargs grep -l 'TODO\\|FIXME\\|console\\.log' 2>/dev/null | head -3 || true; fi; } && { echo \"$CLAUDE_COMMAND\" | grep -E 'rm|del|sudo|chmod.*777' && echo 'Warning: Potentially destructive command detected' || true; } && { if [ \"$CLAUDE_ENVIRONMENT\" = \"production\" ]; then echo 'CAUTION: Production environment detected. Proceed carefully.'; fi; } && echo '[Hook] Git Safety Checks completed'",
            "description": "Integrated git safety: pre-commit validation, destructive command detection, environment checks"
          }
        ]
      },
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Agent Task Started at '$(date '+%Y-%m-%d %H:%M:%S') >> .claude/task-log.txt && echo '[Hook] Agent task logging initialized'",
            "description": "Streamlined agent task execution logging"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Hook] Pre-Edit Validation executing...' && { git status --porcelain | wc -l | awk '{if($1>10) print \"Warning: \" $1 \" uncommitted files. Consider committing changes.\"}'; } && { git branch | grep '\\*' | grep -E 'main|master|production' && echo 'Warning: Working on protected branch. Consider using feature branch.' || true; } && { find . -name '*.test.js' -o -name '*.test.ts' -o -name '*.spec.js' -o -name '*.spec.ts' | head -1 | grep -q '.' && echo 'Tests found - remember to update if needed' || echo 'No tests found - consider adding tests'; } && echo '[Hook] Pre-Edit Validation completed'",
            "description": "Integrated pre-edit validation: uncommitted files, branch protection, test reminders"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "grep -n 'TODO\\|FIXME\\|HACK\\|XXX' \"$CLAUDE_TARGET_FILE\" 2>/dev/null | head -3 | sed 's/^/[Hook] Technical Debt: /' || echo '[Hook] No technical debt markers found'",
            "description": "Technical debt marker detection with structured output"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "if [ -f \"$CLAUDE_TARGET_FILE\" ]; then echo '[Hook] Warning: File exists and will be overwritten'; else echo '[Hook] Creating new file'; fi",
            "description": "File overwrite warning with clear hook identification"
          }
        ]
      }
    ],
    "QualityGates": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[QualityGate] Testing & Coverage Validation executing...' && { npm run test:coverage 2>/dev/null | grep -E 'Statements.*[0-9]+%' | awk '{if(substr($NF,1,length($NF)-1)+0 < 80) print \"FAILED: Test coverage below 80% (\" $NF \")\"; else print \"PASSED: Test coverage \" $NF}' || echo 'Coverage check skipped - no test configuration'; } && { npm run lint 2>/dev/null | grep -E 'error|Error' | wc -l | awk '{if($1>0) print \"FAILED: \" $1 \" linting errors found\"; else print \"PASSED: No linting errors\"}' || echo 'Lint check skipped - no linter configuration'; } && echo '[QualityGate] Testing & Coverage completed'",
            "description": "Integrated quality gate: test coverage and linting validation"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[QualityGate] Security & Dependencies executing...' && { npm audit --audit-level=high 2>/dev/null | grep -E 'high|critical' | wc -l | awk '{if($1>0) print \"FAILED: \" $1 \" high/critical vulnerabilities\"; else print \"PASSED: No high/critical vulnerabilities\"}' || echo 'Security audit skipped - no package.json'; } && { grep -r 'TODO\\|FIXME\\|HACK' . --include='*.js' --include='*.ts' --include='*.jsx' --include='*.tsx' --exclude-dir=node_modules 2>/dev/null | wc -l | awk '{if($1>20) print \"WARNING: \" $1 \" technical debt items (limit: 20)\"; else print \"PASSED: Technical debt within limits (\" $1 \"/20)\"}'; } && echo '[QualityGate] Security & Dependencies completed'",
            "description": "Integrated quality gate: security vulnerabilities and technical debt validation"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[QualityGate] Build & Architecture executing...' && { tsc --noEmit 2>/dev/null && echo 'PASSED: TypeScript compilation successful' || echo 'TypeScript check skipped - no tsconfig.json'; } && { find . -name '*.js' -o -name '*.ts' -o -name '*.jsx' -o -name '*.tsx' | grep -v node_modules | xargs wc -l | tail -1 | awk '{if($1>50000) print \"WARNING: Codebase size \" $1 \" lines (consider refactoring)\"; else print \"PASSED: Codebase size \" $1 \" lines\"}'; } && { if [ -f 'package.json' ]; then node -e \"const pkg=require('./package.json'); const deps=Object.keys(pkg.dependencies||{}).length; const devDeps=Object.keys(pkg.devDependencies||{}).length; const total=deps+devDeps; console.log(total>100?'WARNING: '+total+' dependencies (consider consolidation)':'PASSED: '+total+' dependencies')\"; fi; } && echo '[QualityGate] Build & Architecture completed'",
            "description": "Integrated quality gate: build validation, codebase size, dependency management"
          }
        ]
      }
    ],
    "WorkflowTriggers": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "condition": "git diff --cached --name-only | grep -E 'package\\.json$'",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[WorkflowTrigger] Package.json changed - Running dependency management...' && npm install --silent && npm audit --audit-level=moderate && echo '[WorkflowTrigger] Dependency management completed'",
            "description": "Package.json change workflow: install and audit dependencies"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "condition": "git diff --cached --name-only | grep -E '\\.(test|spec)\\.(js|ts|jsx|tsx)$'",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[WorkflowTrigger] Test files changed - Running test suite...' && npm test -- --run && echo '[WorkflowTrigger] Test execution completed'",
            "description": "Test file change workflow: execute test suite"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "condition": "git diff --cached --name-only | grep -E 'tsconfig\\.json$'",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[WorkflowTrigger] TypeScript config changed - Validating compilation...' && tsc --noEmit && echo '[WorkflowTrigger] TypeScript validation completed'",
            "description": "TypeScript config change workflow: validate compilation"
          }
        ]
      },
      {
        "matcher": "Write",
        "condition": "echo $CLAUDE_TARGET_FILE | grep -E '\\.env'",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[WorkflowTrigger] Environment file created - Updating .gitignore...' && grep -q '\\.env' .gitignore || echo '.env' >> .gitignore && echo '[WorkflowTrigger] Environment file security completed'",
            "description": "Environment file creation workflow: ensure .gitignore protection"
          }
        ]
      }
    ],
    "Integration": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Integration] Platform Detection executing...' && { if [ \"$(uname)\" = 'Darwin' ]; then echo 'Platform: macOS detected'; elif [ \"$(uname)\" = 'Linux' ]; then echo 'Platform: Linux detected'; elif [ \"$OS\" = 'Windows_NT' ]; then echo 'Platform: Windows detected'; fi; } && { if command -v code >/dev/null 2>&1; then echo 'IDE: VS Code available'; fi; } && echo '[Integration] Platform Detection completed'",
            "description": "Integrated platform and IDE detection for cross-platform compatibility"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Integration] Tool Detection executing...' && { if [ -f 'docker-compose.yml' ] || [ -f 'Dockerfile' ]; then echo 'Container: Docker configuration detected'; fi; } && { if [ -f '.github/workflows/main.yml' ] || [ -f '.github/workflows/ci.yml' ]; then echo 'CI/CD: GitHub Actions detected'; fi; } && echo '[Integration] Tool Detection completed'",
            "description": "Integrated tool detection: Docker, CI/CD, and other development tools"
          }
        ]
      }
    ],
    "Session": [
      {
        "matcher": "Stop",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Session] Ending session at '$(date '+%Y-%m-%d %H:%M:%S')' - Generating summary...' && git status && echo 'Summary: '$(git diff --cached --name-only | wc -l)' staged files, '$(git status --porcelain | wc -l)' total changes' && { if [ -f .claude/task-log.txt ]; then echo 'Recent tasks:' && tail -3 .claude/task-log.txt; fi; } && echo '[Session] Session summary completed'",
            "description": "Integrated session management: status summary, change tracking, task history"
          }
        ]
      }
    ],
    "Memory": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "reminder",
            "message": "[Memory Protocol] Remember to view /memories/ directory before starting agent work (Law #6)",
            "description": "Memory protocol reminder for agent task delegation"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "condition": "echo $CLAUDE_TARGET_FILE | grep -E 'memories/'",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Memory] Validating memory file path...' && node scripts/validate-memory-path.js \"$CLAUDE_TARGET_FILE\" && echo '[Memory] Path validation passed' || echo '[Memory] WARNING: Invalid memory path detected'",
            "description": "Memory file path security validation using validate-memory-path.js"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "condition": "echo $CLAUDE_TARGET_FILE | grep -E 'memories/.*\\.xml$'",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Memory] Checking memory file size...' && { if [ -f \"$CLAUDE_TARGET_FILE\" ]; then SIZE=$(wc -c < \"$CLAUDE_TARGET_FILE\" 2>/dev/null || echo 0); if [ $SIZE -gt 51200 ]; then echo '[Memory] WARNING: File exceeds 50KB limit ('$SIZE' bytes)'; else echo '[Memory] File size OK ('$SIZE' bytes)'; fi; else echo '[Memory] New memory file - size check passed'; fi; } && echo '[Memory] Size validation completed'",
            "description": "Memory file size limit enforcement (50KB max per Law #6)"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "condition": "echo $CLAUDE_TARGET_FILE | grep -E 'memories/.*\\.xml$'",
        "hooks": [
          {
            "type": "command",
            "command": "echo '[Memory] Scanning for sensitive data...' && { grep -E '(API[_-]?KEY|SECRET|PASSWORD|TOKEN|[0-9]{4}[- ]?[0-9]{4}[- ]?[0-9]{4}[- ]?[0-9]{4})' \"$CLAUDE_TARGET_FILE\" 2>/dev/null && echo '[Memory] WARNING: Potential sensitive data detected in memory file' || echo '[Memory] No sensitive data patterns found'; } && echo '[Memory] Security scan completed'",
            "description": "Memory file sensitive data detection (Law #6 security requirement)"
          }
        ]
      },
      {
        "matcher": "TodoWrite",
        "hooks": [
          {
            "type": "reminder",
            "message": "[Memory Protocol] Consider updating /memories/session-context/phase-status.xml with TodoWrite status (Law #6)",
            "description": "Memory protocol reminder for TodoWrite synchronization"
          }
        ]
      }
    ]
  }
}